(dp1
S'output'
p2
S''
sS'layer'
p3
S'/home/shrenik/web2py/applications/vlab/controllers/default.py'
p4
sS'code'
p5
S'\n#########################################################################\n## This is a samples controller\n## - index is the default action of any application\n## - user is required for authentication and authorization\n## - download is for downloading files uploaded in the db (does streaming)\n## - call exposes all registered services (none by default)\n#########################################################################  \ndef register():\n\treturn dict(form=auth.register(next=URL(request.application,\'default\',\'create_count\')))\n\ndef create_count():\n\tuser_id=auth.user.id\n\tdb.p_count.insert(user_id=user_id,count=0)\n\tredirect(URL(request.application,\'default\',\'index\'))\n\n@auth.requires_login()\ndef index():\n    import os\n    import re\n    import commands\n    """\n    example action using the internationalization operator T and flash\n    rendered by views/default/index.html or views/generic.html\n    """\n    last=request.vars\n    if last:\n\t db.programs.i1_size.default=last.i1_size\n   \t db.programs.i1_associativity.default=last.i1_associativity\n   \t db.programs.i1_line_size.default=last.i1_line_size\n\t db.programs.d1_size.default=last.d1_size\n   \t db.programs.d1_associativity.default=last.d1_associativity\n   \t db.programs.d1_line_size.default=last.d1_line_size\n\t db.programs.l2_size.default=last.l2_size\n   \t db.programs.l2_associativity.default=last.l2_associativity\n   \t db.programs.l2_line_size.default=last.l2_line_size\n    else:\n   \t db.programs.i1_size.default=2\n   \t db.programs.i1_associativity.default=2\n   \t db.programs.i1_line_size.default=64\n   \t db.programs.d1_size.default=2\n   \t db.programs.d1_associativity.default=2\n   \t db.programs.d1_line_size.default=64\n   \t db.programs.l2_size.default=8\n   \t db.programs.l2_associativity.default=8\n   \t db.programs.l2_line_size.default=64\n    default_code=glob[\'code\']\n    db.programs.uploaded_by.default=auth.user.id\n    curr_count=db(db.p_count.user_id==auth.user.id).select()\n\n    pid=[]\n    values={}\n    flag=0\n    compile=True\n    list=[]\n    out="Test"\n    inp=None\n    out_mod=None\n    input_path=""; i1_s=0\n    form=SQLFORM(db.programs)\n    file_name=str(auth.user.id)+\'_\'+str(curr_count[0].count)+\'.c\'\n#    if request.vars.file!=None and len(request.vars.file)>0:\n #       request.vars.file.filename=file_name\n    if(form.accepts(request.vars,session)):\n\t session.i1_ass=form.vars.i1_associativity\n         flag=1\n\t path=os.getcwd()\n         path=path+\'/applications/vlab/uploads/\'#+form.vars.file\n         if len(form.vars.file)>0:\n       \t\t  inp=commands.getstatusoutput(\'cc \'+path+form.vars.file+\' -o\'+path+str(auth.user.id))\n\t\t  fp=open(path+form.vars.file,"r")\n\t\t  default_code=fp.read()\n\t\t  fp.close()\n\t else:\n\t\t  file_name=str(auth.user.id)+\'_\'+str(curr_count[0].count)+\'.c\'\n\t\t  db(db.programs.id==form.vars.id).update(file=file_name)\n\t\t  fp=open(path+file_name,"w")\n\t\t  fp.write(request.vars.code)\n\t\t  fp.close()\n\t\t  default_code=request.vars.code\n       \t\t  inp=commands.getstatusoutput(\'cc \'+path+file_name+\' -o\'+path+str(auth.user.id))\n\t if inp[0] != 0:\n\t\t compile=False\n\t i1_s=form.vars.i1_size * 1024; \n\t d1_s=form.vars.d1_size * 1024; \n\t l2_s=form.vars.l2_size * 1024; \n\t values["compile"]=compile; values["input"]=""\n\t if compile==True:\n          command=\'valgrind --tool=cachegrind --I1=\'+str(i1_s)+\',\'+str(form.vars.i1_associativity)+\',\'+str(form.vars.i1_line_size)+\' \'+\'--D1=\'+str(d1_s)+\',\'+str(form.vars.d1_associativity)+\',\'+str(form.vars.d1_line_size)+\' \'+\'--L2=\'+str(l2_s)+\',\'+str(form.vars.l2_associativity)+\',\'+str(form.vars.l2_line_size)+ \' --cachegrind-out-file=\'+path+str(auth.user.id)+\'.\'+str(curr_count[0].count)+\'.%p \'+path+str(auth.user.id)\n          if len(form.vars.input_file)>0:\n\t     input_path=os.getcwd()\n             input_path=input_path+\'/applications/vlab/uploads/\'+form.vars.input_file; values["input"]=input_path\n             command=command+\'<\'+input_path\n         \n\t  out=commands.getstatusoutput(command)\n\t  out_mod=re.split(\'\\n\',out[1])\n\t  regex="==(\\d*)==\\s*([^:]*):\\s*(\\d+.*)"\n\t  for i in out_mod:\n\t\t match=re.findall(regex,i)\n\t\t if len(match)>0:\n\t\t \tprocid=match[0][0]\n\t\t\tif procid not in pid:\n\t\t\t\t pid.append(procid)\n\t\t\tlist.append(match[0])\t\n    if len(list)>0:\n\tregex="([^\\(]+)\\(\\s*(\\S+)[^\\+]*\\+\\s*(\\S+).*" ; t1= re.findall(regex,list[5][2]) ; values["a"]=t1[0][0] ; values["a_1"]=t1[0][1] ; values["a_2"] = t1[0][2] \n\tt2= re.findall(regex,list[6][2]) ; values["c"]=t2[0][0] ; values["c_1"]=t2[0][1] ; values["c_2"] = t2[0][2] ; values["e"]=values["c"] ; values["e_1"] = values["c_1"]; values["e_2"]=values["c_2"] \n\tt3= re.findall(regex,list[8][2]) ; values["d"]=t3[0][0] ; values["d_1"]=t3[0][1] ; values["d_2"] = t3[0][2] \n\tt4= re.findall(regex,list[7][2]) ; values["g"]=t4[0][0] ; values["g_1"]=t4[0][1] ; values["g_2"] = t4[0][2]\n\tvalues["b"]= int(values["a"].replace(",",""))-int(values["c"].replace(",","")) ; values["b_1"]= int(values["a_1"].replace(",",""))-int(values["c_1"].replace(",","")) ; values["b_2"]= int(values["a_2"].replace(",",""))-int(values["c_2"].replace(",","")) \n\tvalues["f"]= int(values["e"].replace(",",""))-int(values["g"].replace(",","")) ; values["f_1"]= int(values["e_1"].replace(",",""))-int(values["g_1"].replace(",","")) ; values["f_2"]= int(values["e_2"].replace(",",""))-int(values["g_2"].replace(",","")) \n\tvalues["h"]=str("%.2f"%((float(values["g"].replace(",",""))/float(values["e"].replace(",","")))*100))+"%" \n\tvalues["h_1"]=str("%.2f"%((float(values["g_1"].replace(",",""))/float(values["e_1"].replace(",","")))*100))+"%"\n\tvalues["h_2"]=str("%.2f"%((float(values["g_2"].replace(",",""))/float(values["e_2"].replace(",","")))*100))+"%"\n#update count table on successful run...ensure updation on deletion too-to be done\t\n\tcurr_count=db(db.p_count.user_id==auth.user.id).select()\n\tcurr_count=curr_count[0].count+1\n\tdb(db.p_count.user_id==auth.user.id).update(count=curr_count)\n    #session.values={}\n    #session.values=values\n    session.input=input_path\n    session.compile=compile\n    session.i1_s=i1_s\n\n    response.flash = T(\'Welcome to web2py\')\n    return dict(default_code=default_code,form=form,message=T(\'Hello World\'),list=list,pid=pid,flag=flag,values=values,compile=compile)\n\ndef show_session():\n\treturn dict(session=session)\n\ndef show_graphs():\n\t import os\n\t import re\n\t import commands\n\t list=[]\n\t #values=session.values\n\t y1=[]\n\t y2=[]\n\t y3=[]\n\t import time\n\t path=os.getcwd()\n         path=path+\'/applications/vlab/uploads/\'\n\t input_path=session.input\n\t if session.compile==True:\n\t\tfor i in [1,2,4,8]: \n\t\t\tlist=[]\n\t\t\tcommand=\'valgrind --tool=cachegrind --I1=\'+str(session.i1_s)+\',\'+str(i)+\',\'+str(64)+ \' --cachegrind-out-file=\'+path+str(auth.user.id)+\'.%p \'+path+str(auth.user.id)\n\t\t\tif input_path != "":\n\t   \t\t\tcommand=command + \'<\' +input_path\n\t\t\tout=commands.getstatusoutput(command)\n\t\t\tout_mod=re.split(\'\\n\',out[1])\n\t  \t\tregex="==(\\d*)==\\s*([^:]*):\\s*(\\d+.*)"\n\t  \t\tfor j in out_mod:\n\t\t \t\tmatch=re.findall(regex,j)\n\t\t \t\tif len(match)>0:\n\t\t\t\t\tlist.append(match[0])\n\t\t\tif len(list) >0:\n\t\t\t\t\n\t\t\t\ty1.append(100 - float(re.findall(\'[^%]+\',(list[3][2]))[0]))\n\t\t\t\tregex="([^\\(]+)\\(\\s*(\\S+)[^\\+]*\\+\\s*(\\S+).*"\n\t\t\t\tt3= re.findall(regex,list[8][2])\n\t\t\t\ty2.append(100 -float(re.findall(\'[^%]+\',t3[0][0])[0]))\n\t\t\t\tl2i_miss=int(list[2][2].replace(",",""))\n\t\t\t\tl2d_miss= re.findall(regex,list[7][2])[0][0]\n\t\t\t\tl2_miss=l2i_miss+int(l2d_miss.replace(",",""))\n\t\t\t\tl2i_ref=int(list[1][2].replace(\',\',\'\'))\n\t\t\t\tl2d_ref=re.findall(regex,list[6][2])[0][0]\n\t\t\t\tl2_ref=l2i_ref+int(l2d_ref.replace(\',\',\'\'))\n\t\t\t\tl2_miss_rate=((float(l2_miss)/l2_ref)*100)\n\t\t\t\ty3.append(100 - l2_miss_rate)\n\t\t\n\t\tctr=0\n\t\tans1="[["\n\t\tfor i in [1,2,4,8]:\n\t\t\tans1=ans1+\'[\'+str(i)+\',\'+str(y1[ctr])+\']\'\n\t\t\tif i!=8:\n\t\t\t\tans1+=\',\'\n\t\t\tctr+=1\n\t\tans1+=\']]\'\n\t\tans2="[["\n\t\tctr=0\n\t\tfor i in [1,2,4,8]:\n\t\t\tans2=ans2+\'[\'+str(i)+\',\'+str(y2[ctr])+\']\'\n\t\t\tif i!=8:\n\t\t\t\tans2+=\',\'\n\t\t\tctr+=1\n\t\tans2+=\']]\'\n\t\tans3="[["\n\t\tctr=0\n\t\tfor i in [1,2,4,8]:\n\t\t\tans3=ans3+\'[\'+str(i)+\',\'+str(y3[ctr])+\']\'\n\t\t\tif i!=8:\n\t\t\t\tans3+=\',\'\n\t\t\tctr+=1\n\t\tans3+=\']]\'\n\t\tctr=0\n\t\tans="[["\n\t\tfor i in [1,2,4,8]:\n\t\t\tans=ans+\'[\'+str(i)+\',\'+str(y1[ctr])+\']\'\n\t\t\tif i!=8:\n\t\t\t\tans+=\',\'\n\t\t\tctr+=1\n\t\tans+=\'],\'\n\t\tans+="["\n\t\tctr=0\n\t\tfor i in [1,2,4,8]:\n\t\t\tans=ans+\'[\'+str(i)+\',\'+str(y2[ctr])+\']\'\n\t\t\tif i!=8:\n\t\t\t\tans+=\',\'\n\t\t\tctr+=1\n\t\tans+=\'],\'\n\t\tans+="["\n\t\tctr=0\n\t\tfor i in [1,2,4,8]:\n\t\t\tans=ans+\'[\'+str(i)+\',\'+str(y3[ctr])+\']\'\n\t\t\tif i!=8:\n\t\t\t\tans+=\',\'\n\t\t\tctr+=1\n\t\tans+=\']]\'\n         return dict(ans1=ans1,ans2=ans2,ans3=ans3,ans=ans)\n\n\t \n\n\ndef customize():\n    form=SQLFORM(db.options)\n    \ndef user():\n    """\n    exposes:\n    http://..../[app]/default/user/login \n    http://..../[app]/default/user/logout\n    http://..../[app]/default/user/register\n    http://..../[app]/default/user/profile\n    http://..../[app]/default/user/retrieve_password\n    http://..../[app]/default/user/change_password\n    use @auth.requires_login()\n        @auth.requires_membership(\'group name\')\n        @auth.requires_permission(\'read\',\'table name\',record_id)\n    to decorate functions that need access control\n    """\n    if request.args(0)==\'register\':\n\t    redirect(URL(request.application,\'default\',\'register\'))\n    return dict(form=auth())\n\n\ndef download():\n    """\n    allows downloading of uploaded files\n    http://..../[app]/default/download/[filename]\n    """\n   \n    return response.stream(open(os.path.join(request.folder,\'uploads\',request.args[0]),\'rb\'))\n    #return response.download(request,db)\n\n\ndef call():\n    """\n    exposes services. for example:\n    http://..../[app]/default/call/jsonrpc\n    decorate with @services.jsonrpc the functions to expose\n    supports xml, json, xmlrpc, jsonrpc, amfrpc, rss, csv\n    """\n    session.forget()\n    return service()\n\nresponse._vars=response._caller(index)\n'
p6
sS'snapshot'
p7
(dp8
S'exception'
p9
(dp10
S'__hash__'
p11
S"<method-wrapper '__hash__' of exceptions.NameError object>"
p12
sS'__setattr__'
p13
S"<method-wrapper '__setattr__' of exceptions.NameError object>"
p14
sS'__reduce_ex__'
p15
S'<built-in method __reduce_ex__ of exceptions.NameError object>'
p16
sS'__getslice__'
p17
S"<method-wrapper '__getslice__' of exceptions.NameError object>"
p18
sS'__getitem__'
p19
S"<method-wrapper '__getitem__' of exceptions.NameError object>"
p20
sS'__setstate__'
p21
S'<built-in method __setstate__ of exceptions.NameError object>'
p22
sS'__reduce__'
p23
S'<built-in method __reduce__ of exceptions.NameError object>'
p24
sS'__str__'
p25
S"<method-wrapper '__str__' of exceptions.NameError object>"
p26
sS'__format__'
p27
S'<built-in method __format__ of exceptions.NameError object>'
p28
sS'__getattribute__'
p29
S"<method-wrapper '__getattribute__' of exceptions.NameError object>"
p30
sS'__class__'
p31
S"<type 'exceptions.NameError'>"
p32
sS'__unicode__'
p33
S'<built-in method __unicode__ of exceptions.NameError object>'
p34
sS'__delattr__'
p35
S"<method-wrapper '__delattr__' of exceptions.NameError object>"
p36
sS'__subclasshook__'
p37
S'<built-in method __subclasshook__ of type object>'
p38
sS'__repr__'
p39
S"<method-wrapper '__repr__' of exceptions.NameError object>"
p40
sS'args'
p41
S'("global name \'glob\' is not defined",)'
p42
sS'__dict__'
p43
S'{}'
p44
sS'__sizeof__'
p45
S'<built-in method __sizeof__ of exceptions.NameError object>'
p46
sS'__doc__'
p47
S"'Name not found globally.'"
p48
sS'__init__'
p49
S"<method-wrapper '__init__' of exceptions.NameError object>"
p50
sS'__new__'
p51
S'<built-in method __new__ of type object>'
p52
ssS'evalue'
p53
S"global name 'glob' is not defined"
p54
sS'request'
p55
(dp56
S'function'
p57
S"'index'"
p58
sS'body'
p59
S'<cStringIO.StringO object>'
p60
sS'wsgi'
p61
S"<Storage {'start_response': <function <lambda> a...ING': 'gzip,deflate', 'HTTP_KEEP_ALIVE': '115'}}>"
p62
sS'extension'
p63
S"'html'"
p64
sS'vars'
p65
S'<Storage {}>'
p66
sS'cid'
p67
S'None'
p68
sS'url'
p69
S'<gluon.html.XML object>'
p70
sg41
S'[]'
p71
sS'controller'
p72
S"'default'"
p73
sS'cookies'
p74
S"<SimpleCookie: __utma='96992031.1671719183.12879...'127-0-0-1-5259ccc8-c072-4fbc-99c9-1818afaf6a1d'>"
p75
sS'application'
p76
S"'vlab'"
p77
sS'ajax'
p78
S'False'
p79
sS'client'
p80
S"'127.0.0.1'"
p81
sS'env'
p82
S"<Storage {'http_user_agent': 'Mozilla/5.0 (X11; ..., 'wsgi_run_once': False, 'path_info': '/vlab/'}>"
p83
sS'raw_args'
p84
S'None'
p85
sS'get_vars'
p86
S'<Storage {}>'
p87
sS'folder'
p88
S"'/home/shrenik/web2py/applications/vlab/'"
p89
sS'now'
p90
S'datetime.datetime(2010, 10, 30, 2, 21, 36, 19145)'
p91
sS'post_vars'
p92
S'<Storage {}>'
p93
ssS'frames'
p94
(lp95
(dp96
S'file'
p97
S'/home/shrenik/web2py/gluon/restricted.py'
p98
sS'dump'
p99
(dp100
S'environment'
p101
S"{'A': <class 'gluon.html.A'>, 'Auth': <class 'gluon.tools.Auth'>, 'B': <class 'gluon.html.B'>, 'BEAUTIFY': <class 'gluon.html.BEAUTIFY'>, 'BODY': <class 'gluon.html.BODY'>, 'BR': <class 'gluon.html.BR'>, 'CENTER': <class 'gluon.html.CENTER'>, 'CLEANUP': <class 'gluon.validators.CLEANUP'>, 'CODE': <class 'gluon.html.CODE'>, 'CRYPT': <class 'gluon.validators.CRYPT'>, ...}"
p102
sS'ccode'
p103
S'<code object <module> at 0xa65d968, file "/home/...pplications/vlab/controllers/default.py", line 9>'
p104
ssS'lnum'
p105
I188
sS'lines'
p106
(dp107
I192
S'        # XXX Show exception in Wing IDE if running in debugger'
p108
sI183
S'        if type(code) == types.CodeType:'
p109
sI184
S'            ccode = code'
p110
sI185
S'        else:'
p111
sI186
S'            ccode = compile2(code,layer)'
p112
sI187
S''
sI188
S'        exec ccode in environment'
p113
sI189
S'    except HTTP:'
p114
sI190
S'        raise'
p115
sI191
S'    except Exception:'
p116
ssS'call'
p117
S"(code='\\n###############################################...ervice()\\n\\nresponse._vars=response._caller(index)\\n', environment={'A': <class 'gluon.html.A'>, 'Auth': <class 'gluon.tools.Auth'>, 'B': <class 'gluon.html.B'>, 'BEAUTIFY': <class 'gluon.html.BEAUTIFY'>, 'BODY': <class 'gluon.html.BODY'>, 'BR': <class 'gluon.html.BR'>, 'CENTER': <class 'gluon.html.CENTER'>, 'CLEANUP': <class 'gluon.validators.CLEANUP'>, 'CODE': <class 'gluon.html.CODE'>, 'CRYPT': <class 'gluon.validators.CRYPT'>, ...}, layer='/home/shrenik/web2py/applications/vlab/controllers/default.py')"
p118
sS'func'
p119
S'restricted'
p120
sa(dp121
g97
S'/home/shrenik/web2py/applications/vlab/controllers/default.py'
p122
sg99
(dp123
sg105
I267
sg106
(dp124
I256
S''
sI257
S'def call():'
p125
sI258
S'    """'
p126
sI259
S'    exposes services. for example:'
p127
sI260
S'    http://..../[app]/default/call/jsonrpc'
p128
sI261
S'    decorate with @services.jsonrpc the functions to expose'
p129
sI262
S'    supports xml, json, xmlrpc, jsonrpc, amfrpc, rss, csv'
p130
sI263
S'    """'
p131
sI264
S'    session.forget()'
p132
sI265
S'    return service()'
p133
ssg117
S'()'
p134
sg119
S'<module>'
p135
sa(dp136
g97
S'/home/shrenik/web2py/gluon/globals.py'
p137
sg99
(dp138
S'self'
p139
S'undefined'
p140
sS'f'
S'<function index>'
p141
ssg105
I96
sg106
(dp142
I96
S'        self._caller = lambda f: f()'
p143
sI97
S'        self._view_environment = None'
p144
sI98
S'        self._custom_commit = None'
p145
sI99
S'        self._custom_rollback = None'
p146
sI100
S''
sI91
S"        self.flash = ''           # used by the default view layout"
p147
sI92
S'        self.meta = Storage()     # used by web2py_ajax.html'
p148
sI93
S'        self.menu = []            # used by the default view layout'
p149
sI94
S'        self.files = []           # used by web2py_ajax.html'
p150
sI95
S'        self._vars = None'
p151
ssg117
S'(f=<function index>)'
p152
sg119
S'<lambda>'
p153
sa(dp154
g97
S'/home/shrenik/web2py/gluon/tools.py'
p155
sg99
(dp156
S'action'
p157
S'<function index>'
p158
sS'a'
S'()'
p159
sS'b'
g44
ssg105
I2264
sg106
(dp160
I2259
S'                               vars=request.get_vars)'
p161
sI2260
S'                    return call_or_redirect(self.settings.on_failed_authentication,'
p162
sI2261
S'                                            self.settings.login_url + \\'
p163
sI2262
S"                                                '?_next='+urllib.quote(next)"
p164
sI2263
S'                                            )'
p165
sI2264
S'                return action(*a, **b)'
p166
sI2265
S'            f.__doc__ = action.__doc__'
p167
sI2266
S'            f.__name__ = action.__name__'
p168
sI2267
S'            f.__dict__.update(action.__dict__)'
p169
sI2268
S'            return f'
p170
ssg117
S'(*a=(), **b={})'
p171
sg119
S'f'
sa(dp172
g97
S'/home/shrenik/web2py/applications/vlab/controllers/default.py'
p173
sg99
(dp174
S'glob'
p175
g140
sS'default_code'
p176
g140
ssg105
I47
sg106
(dp177
I42
S'   \t db.programs.d1_associativity.default=2'
p178
sI43
S'   \t db.programs.d1_line_size.default=64'
p179
sI44
S'   \t db.programs.l2_size.default=8'
p180
sI45
S'   \t db.programs.l2_associativity.default=8'
p181
sI46
S'   \t db.programs.l2_line_size.default=64'
p182
sI47
S"    default_code=glob['code']"
p183
sI48
S'    db.programs.uploaded_by.default=auth.user.id'
p184
sI49
S'    curr_count=db(db.p_count.user_id==auth.user.id).select()'
p185
sI50
S''
sI51
S'    pid=[]'
p186
ssg117
S'()'
p187
sg119
S'index'
p188
sasS'pyver'
p189
S'Python 2.6.6: /usr/bin/python'
p190
sS'session'
p191
(dp192
S'flash'
p193
S'None'
p194
sS'_formkey[login]'
p195
S"'7e49af4b-a9ee-45f7-8b04-035248774df7'"
p196
sS'auth'
p197
S"<Storage {'expiration': 3600, 'user': <Storage {...0, 10, 30, 2, 21, 36, 19145), 'remember': False}>"
p198
ssS'etype'
p199
S"<type 'exceptions.NameError'>"
p200
sS'date'
p201
S'Sat Oct 30 02:21:36 2010'
p202
sS'response'
p203
(dp204
S'status'
p205
S'200'
p206
sg59
S'<cStringIO.StringO object>'
p207
sg74
S"<SimpleCookie: session_id_vlab='127-0-0-1-5259ccc8-c072-4fbc-99c9-1818afaf6a1d'>"
p208
sS'_vars'
p209
S'None'
p210
sS'title'
p211
S"'vlab'"
p212
sS'session_file'
p213
S"<open file '/home/shrenik/web2py/applications/vl...259ccc8-c072-4fbc-99c9-1818afaf6a1d', mode 'rb+'>"
p214
sS'flash'
p215
S"'Logged in'"
p216
sS'_custom_rollback'
p217
S'None'
p218
sS'session_id'
p219
S"'127-0-0-1-5259ccc8-c072-4fbc-99c9-1818afaf6a1d'"
p220
sS'headers'
p221
S"<Storage {'Expires': 'Fri, 29 Oct 2010 20:51:36 ...he, must-revalidate, post-check=0, pre-check=0'}>"
p222
sS'meta'
p223
S"<Storage {'keywords': 'bla bla bla', 'description': 'describe your app', 'author': 'you'}>"
p224
sS'session_filename'
p225
S"'/home/shrenik/web2py/applications/vlab/sessions/127-0-0-1-5259ccc8-c072-4fbc-99c9-1818afaf6a1d'"
p226
sS'postprocessing'
p227
S'[]'
p228
sS'menu'
p229
S"[(<lazyT 'Index'>, False, <gluon.html.XML object>, []), ('Change Layout', False, <gluon.html.XML object>)]"
p230
sS'_view_environment'
p231
S"{'A': <class 'gluon.html.A'>, 'Auth': <class 'gluon.tools.Auth'>, 'B': <class 'gluon.html.B'>, 'BEAUTIFY': <class 'gluon.html.BEAUTIFY'>, 'BODY': <class 'gluon.html.BODY'>, 'BR': <class 'gluon.html.BR'>, 'CENTER': <class 'gluon.html.CENTER'>, 'CLEANUP': <class 'gluon.validators.CLEANUP'>, 'CODE': <class 'gluon.html.CODE'>, 'CRYPT': <class 'gluon.validators.CRYPT'>, ...}"
p232
sS'subtitle'
p233
S"<lazyT 'customize me!'>"
p234
sS'session_id_name'
p235
S"'session_id_vlab'"
p236
sS'_custom_commit'
p237
S'None'
p238
sS'_caller'
p239
S'<function <lambda>>'
p240
sS'files'
p241
S'[]'
p242
sS'view'
p243
S"'default/index.html'"
p244
ssS'locals'
p245
(dp246
S're'
p247
S"<module 're' from '/usr/lib/python2.6/re.pyc'>"
p248
sS'commands'
p249
S"<module 'commands' from '/usr/lib/python2.6/commands.pyc'>"
p250
sS'last'
p251
S'<Storage {}>'
p252
sS'os'
p253
S"<module 'os' from '/usr/lib/python2.6/os.pyc'>"
p254
sssS'traceback'
p255
S'Traceback (most recent call last):\n  File "/home/shrenik/web2py/gluon/restricted.py", line 188, in restricted\n    exec ccode in environment\n  File "/home/shrenik/web2py/applications/vlab/controllers/default.py", line 267, in <module>\n  File "/home/shrenik/web2py/gluon/globals.py", line 96, in <lambda>\n    self._caller = lambda f: f()\n  File "/home/shrenik/web2py/gluon/tools.py", line 2264, in f\n    return action(*a, **b)\n  File "/home/shrenik/web2py/applications/vlab/controllers/default.py", line 47, in index\n    default_code=glob[\'code\']\nNameError: global name \'glob\' is not defined\n'
p256
s.