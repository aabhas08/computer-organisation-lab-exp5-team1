

public class Architecture {
	int main_xstart = 550;
	int main_ystart = 400;
	int cache_xstart = 350;
	int cache_ystart = 400;
	int[] cache = new int[16];
	int[] main = new int[16];
	String[] array_tags = new String[16];
	int[] array_times_FIFO = new int[16];
	int[] array_times_LRU = new int[16];
	int[] array_dirtybits = new int[16];
	int BlockSize;
	int MainMemory;
	int CacheMemory;
	int Mapping;
	int Associativity;
	int Replacement_policy;
	int Write_policy;
	int Number_CacheBlocks;
	int Number_MainBlocks;
	int Number_sets;

	void arrays_init() {
		r1 = 0;
		while (r1 < 16) {
			this.cache[r1] = 16;
			this.main[r1] = 16;
			this.array_times_FIFO[r1] = 0;
			this.array_times_LRU[r1] = 0;
			this.array_tags[r1] = "";
			this.array_dirtybits[r1] = 0;
			++r1;
		}
	}

	void Draw_labels(java.awt.Graphics arg0) {
		r2 = "DB      TAG        CACHE                                              MAIN MEMORY";
		arg0.drawString(r2, 293, 390);
	}

	void Draw_labels_nowriteback(java.awt.Graphics arg0) {
		r2 = "        TAG        CACHE                                              MAIN MEMORY";
		arg0.drawString(r2, 293, 390);
	}

	void Draw_ini_Direct(java.awt.Graphics arg0) {
		r2 = 0;
		r3 = 0;
		while (r3 < this.Number_CacheBlocks) {
			arg0.clearRect(this.cache_xstart - 35, this.cache_ystart + r2, 34,
					20);
			arg0.drawRect(this.cache_xstart - 35, this.cache_ystart + r2, 34,
					20);
			arg0.clearRect(this.cache_xstart, this.cache_ystart + r2, 100, 20);
			arg0.drawRect(this.cache_xstart, this.cache_ystart + r2, 100, 20);
			arg0.drawString("" + r3, this.cache_xstart + 40, this.cache_ystart
					+ r2 + 15);
			r2 = r2 + 20;
			if (r3 != this.Number_CacheBlocks - 1) {
				arg0.clearRect(this.cache_xstart, this.cache_ystart + r2, 100,
						2);
				arg0.drawRect(this.cache_xstart, this.cache_ystart + r2, 100, 2);
				r2 = r2 + 2;
			}
			++r3;
		}
	}

	void Draw_ini_Main(java.awt.Graphics arg0) {
		r2 = 0;
		r3 = 0;
		while (r3 < this.Number_MainBlocks) {
			arg0.clearRect(this.main_xstart, this.main_ystart + r2, 100, 20);
			arg0.drawRect(this.main_xstart, this.main_ystart + r2, 100, 20);
			arg0.drawString("" + r3, this.main_xstart + 40, this.main_ystart
					+ r2 + 15);
			r2 = r2 + 20;
			if (r3 != this.Number_MainBlocks - 1) {
				arg0.clearRect(this.main_xstart, this.main_ystart + r2, 100, 2);
				arg0.drawRect(this.main_xstart, this.main_ystart + r2, 100, 2);
				r2 = r2 + 2;
			}
			++r3;
		}
	}

	void Draw_ini_setassociate(java.awt.Graphics arg0) {
		r2 = 0;
		r3 = 0;
		r4 = 1;
		while (r4 < this.Number_CacheBlocks + 1) {
			r5 = this.cache_ystart + r2 + 10;
			arg0.drawLine(this.cache_xstart + 100 + 3, this.cache_ystart + r2
					+ 10, this.cache_xstart + 100 + 10, this.cache_ystart + r2
					+ 10);
			r6 = 0;
			while (r6 < this.Associativity) {
				arg0.clearRect(this.cache_xstart - 35, this.cache_ystart + r2,
						34, 20);
				arg0.drawRect(this.cache_xstart - 35, this.cache_ystart + r2,
						34, 20);
				arg0.clearRect(this.cache_xstart, this.cache_ystart + r2, 100,
						20);
				arg0.drawRect(this.cache_xstart, this.cache_ystart + r2, 100,
						20);
				r2 = r2 + 20;
				++r6;
				++r4;
			}
			arg0.drawLine(this.cache_xstart + 100 + 10, r5,
					this.cache_xstart + 100 + 10, this.cache_ystart + r2 - 10);
			arg0.drawLine(this.cache_xstart + 100 + 3, this.cache_ystart + r2
					- 10, this.cache_xstart + 100 + 10, this.cache_ystart + r2
					- 10);
			arg0.drawString("set " + r3, this.cache_xstart + 100 + 11, (r5
					+ this.cache_ystart + r2 - 10) / 2);
			r3 = r3 + 1;
			if (r4 != this.Number_CacheBlocks + 1) {
				arg0.clearRect(this.cache_xstart, this.cache_ystart + r2, 100,
						2);
				arg0.drawRect(this.cache_xstart, this.cache_ystart + r2, 100, 2);
				r2 = r2 + 2;
			}
		}
	}
}

/*
 * Generated by DecoJer 0.9.1, a Java-bytecode decompiler.
 * DecoJer Copyright (C) 2009-2013 AndrÃ© Pankraz. All Rights Reserved.
 *
 * Class File Version: 50 (Java 6)
 * Source File Name: Architecture.java
 */